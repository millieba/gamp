// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Based on main schema from https://authjs.dev/reference/adapter/prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Represents the definition of a badge that can be awarded to user accounts
model BadgeDefinition {
  id          String       @id
  name        String       @unique
  description String
  image       String
  points      Int
  type        String
  threshold   Int
  badgeAwards BadgeAward[] // One badge definition can be related to many badge awards

  @@map("badge_definitions")
}

// Represents the instance of a badge being earned by a user
model BadgeAward {
  id         String   @id @default(cuid())
  badgeId    String   @map("badge_id")
  accountId  String   @map("account_id")
  dateEarned DateTime @map("date_earned")

  badgeDefinition BadgeDefinition @relation(fields: [badgeId], references: [id])
  account         Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("badge_awards")
}

// One user can have multiple accounts with different providers.
model Account {
  id                       String    @id @default(cuid())
  userId                   String    @map("user_id")
  levelId                  Int       @default(1) @map("level_id") // Default level is 1
  type                     String
  provider                 String
  providerAccountId        String    @map("provider_account_id")
  totalPoints              Int       @default(0) @map("total_points") // Total points earned from badges
  refresh_token            String?   @db.Text
  refresh_token_expires_in Int?
  access_token             String?   @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?   @db.Text
  session_state            String?
  lastSync                 DateTime? @map("last_sync") // Timestamp of last sync (for badges and stats)

  githubStats GitHubStats?
  preferences UserPreferences?
  badges      BadgeAward[] // List of badges the user has been awarded with
  level       Level            @relation(fields: [levelId], references: [id])
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Represents the user's level
model Level {
  id        Int       @id
  name      String    @unique
  threshold Int
  accounts  Account[]

  @@map("levels")
}

model UserPreferences {
  id                String   @id @default(cuid())
  accountId         String   @unique @map("account_id")
  excludeLanguages  String[] @default([]) @map("exclude_languages") // Array of programming language names to exclude from stats
  showStrictStreak  Boolean  @default(true) @map("show_strict_streak") // Whether to show strict streak in stats
  showWorkdayStreak Boolean  @default(true) @map("show_workday_streak") // Whether to show workday streak in stats

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

// Represents GitHub statistics for a user account
model GitHubStats {
  id                      String @id @default(cuid())
  accountId               String @unique @map("account_id")
  commitCount             Int?   @map("commit_count")
  nightCommitCount        Int?   @map("night_commit_count")
  morningCommitCount      Int?   @map("morning_commit_count")
  repoCount               Int?   @map("repo_count")
  issueCount              Int?   @map("issue_count")
  avgTimeToCloseIssues    Int?   @map("avg_time_to_close_issues")
  closedIssueCount        Int?   @map("closed_issue_count")
  languagesCount          Int?   @map("languages_count")
  createdPrs              Int?   @map("created_prs")
  createdAndMergedPrs     Int?   @map("created_and_merged_prs")
  strictStreak            Int?   @map("strict_streak")
  strictStreakToContinue  Int?   @map("strict_streak_to_continue")
  workdayStreak           Int?   @map("workday_streak")
  workdayStreakToContinue Int?   @map("workday_streak_to_continue")

  programmingLanguages ProgrammingLanguage[]
  dailyModifications   DailyModification[]
  assignedIssues       AssignedIssue[]

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("github_stats")
}

// Represents programming languages used in GitHub statistics
model ProgrammingLanguage {
  id            String    @id @default(cuid())
  name          String
  bytesWritten  Int       @map("bytes_written")
  firstUsedAt   DateTime? @map("first_used_at")
  githubStatsId String    @map("github_stats_id")

  githubStats GitHubStats @relation(fields: [githubStatsId], references: [id], onDelete: Cascade)

  @@map("programming_languages")
}

// Represents the daily modifications (code lines added, deleted etc.) for an account
model DailyModification {
  id            String   @id @default(cuid())
  date          DateTime
  additions     Int
  deletions     Int
  totalCommits  Int      @map("total_commits")
  githubStatsId String   @map("github_stats_id")

  githubStats GitHubStats @relation(fields: [githubStatsId], references: [id], onDelete: Cascade)

  @@map("daily_modifications")
}

// Represents the issues assigned to an account
model AssignedIssue {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @map("created_at")
  closedAt  DateTime? @map("closed_at")
  number    Int
  state     String
  url       String

  githubStatsId String @map("github_stats_id")

  githubStats GitHubStats @relation(fields: [githubStatsId], references: [id], onDelete: Cascade)

  @@map("assigned_issues")
}
